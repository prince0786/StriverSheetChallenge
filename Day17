## DFS Traversal


void dfs( vector<int> adj[], vector<bool> &visit, int src, vector<int> &smallans){
    visit[src] = 1;
    smallans.push_back(src);
    for(auto it: adj[src]){
        if(!visit[it]){
           dfs(adj,visit,it,smallans) ;
        }
    }
}

vector<vector<int>> depthFirstSearch(int V, int E, vector<vector<int>> &edges)
{
    // Write your code here
    vector<int> adj[V];  
    for(int i=0;i<E;i++){
        adj[edges[i][0]].push_back(edges[i][1]);
        adj[edges[i][1]].push_back(edges[i][0]);
    }
    
    vector<vector<int>> ans;
    vector<bool> visit(V,0);
    for(int i=0;i<V;i++){
        vector<int> smallans;
        if(!visit[i]){
            dfs(adj, visit, i , smallans);
        }
        if (smallans.size() == 0) continue;
        ans.push_back(smallans);
    }
    return ans;
    
}
