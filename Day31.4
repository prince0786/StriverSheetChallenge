### Palindrome Partitioning

DP 

    vector<vector<string>> ans;
    bool ispalindrome(string s,int start,int end)
    {
        while(start<=end)
        {
            if(s[start++]!=s[end--])
                return 0;
        }
        return 1;
    }
    void dfs(string s,vector<string> &v,int idx)
    {
        if(idx>=s.size())
        {
            ans.push_back(v);
            return;
        }
        for(int i=idx;i<s.size();i++)
        {
            if(ispalindrome(s,idx,i))
            {
                v.push_back(s.substr(idx,i-idx+1));
                dfs(s,v,i+1);
                v.pop_back();
                
            }
        }
    }
    vector<vector<string>> partition(string s)
    {
        vector<string> v;
        dfs(s,v,0);
        return ans;
