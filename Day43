## Kruskal Algorithm

#include<bits/stdc++.h>
#include<algorithm>
bool comp(vector<int>&a, vector<int>&b){
    return a[2]<b[2];
}
int findPar(int u, vector<int>&par){
    if(u==par[u]) return u;
    return par[u] = findPar(par[u],par);
}
int unionn(int u, int v, vector<int>&par){
    if(findPar(u,par) == findPar(v,par))
        return 0;
    else if(!(u>=0 && v>=0 && u<par.size() && v<par.size()))
        return 0;
    par[u]=v;
}
int kruskalMST(int n, int m, vector<vector<int>> &graph) {
	// Write your code here.
    sort(graph.begin(), graph.end(), comp);
    vector<int> parent(n+1);
    for(int i=0; i<parent.size(); i++)
        parent[i]=i;
    
    int cost=0;
    for(auto it:graph){
        if(findPar(it[0], parent) != findPar(it[1], parent)){
            cost += it[2];
            unionn(findPar(it[0],parent), findPar(it[1],parent),parent);
        }
    }
    return cost;
}
